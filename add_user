---
#playbook to try powering up a VM
- name: Add a new LDAP User
  hosts: localhost
  gather_facts: false

  vars:
    all_users:
      filter: (objectClass=posixAccount)
    user:
      filter: (uid={{ term }})

    user_sid_base: 'S-1-5-21-2969798157-892696647-1337518218-'
    user_sid_offset: 1115
    group_sid_base: 'S-1-5-21-2012752457-898622647-'
    group_sid_offset: 4172417153

    new_username: 'anewtestuser'
    new_firstname: 'Jeff'
    new_lastname: 'Testuser'
    new_email: 'nothing@example.com'
    new_password: 'notaverygoodpassword'

  vars_prompt:
#   - name: "new_username"
#     prompt: "Username to create"
#   - name: "new_firstname"
#     prompt: "First name of new user"
#   - name: "new_lastname"
#     prompt: "Last name of new user"
#   - name: "new_email"
#     prompt: "Email of new user"
#   - name: "new_password"
#     prompt: "Password of new user"
#     private: yes
   - name: "bind_user"
     prompt: "user/dn to bind to the LDAP as"
     private: no
   - name: "bind_password"
     prompt: "Password of the bind user"
     private: yes

  tasks:
    - set_fact:
        ldap_lookup_config: "{'url': 'ldaps://ldap.nurdspace.nl','base': 'dc=nurd,dc=space','bindpw':'{{bind_password}}','binddn':'{{bind_user}}' }"

#Find the highest UID and GID
    - name: Fetch user
      debug: msg="User {{ item.dn }} has name {{ item.cn }}"
      with_ldap:
        - context: user
        - petraea

    - name: Show one user
      debug: msg="{{ lookup('ldap', 'petraea', context='user', value='cn') }}"

    - name: Fetch uidNumbers
      debug: msg="{{item.uidNumber}}"
      with_ldap:
        - context: all_users
      register: uids

    - set_fact:
        highest_uid: "{{ uids.results | map(attribute='msg') | sort | last }}"

    - name: Fetch gidNumbers
      debug: msg="{{item.gidNumber}}"
      with_ldap:
        - context: all_users
      register: gids

    - set_fact:
        highest_gid: "{{ gids.results | map(attribute='msg') | sort | last }}"

#Make new SAMBA config

    - set_fact:
        new_user: "[['uidNumber', {{highest_uid}}+1 ]]"
    - set_fact:
        new_user: "{{new_user}} + [['gidNumber', {{highest_gid}}+1 ]]"
    - set_fact:
        new_user: "{{new_user}} + [['cn', '{{new_firstname}} {{new_lastname}}' ]]"
    - set_fact:
        new_user: "{{new_user}} + [['sn', '{{new_lastname}}' ]]"
    - set_fact:
        new_user: "{{new_user}} + [['uid', '{{new_username}}' ]]"

    - name: Show new user
      debug: msg="{{ new_user }}"

    #Calculated values
#    uid=getNextField('uidNumber')
#    gid=getNextField('gidNumber')
#    smbpass = hashlib.new('md4', password.encode('utf-16le')).digest().encode('hex').upper()

#    uentry={}
#    uentry['givenName']=[firstname]
#    uentry['cn']=[firstname+' '+lastname]
#    uentry['sn']=[lastname]
#    uentry['uid']=[username]
#    uentry['homeDirectory']=['/home/'+username]
#    uentry['uidNumber']=[str(uid)]
#    uentry['gidNumber']=[str(gid)]
#    uentry['sambaSID']=[usidbase+str(usidn+uid)]
#    uentry['loginShell']=['/bin/bash']
#    uentry['mail']=[mail]
#    uentry['objectClass']=['inetOrgPerson','posixAccount','top','sambaSamAccount']
#    uentry['sambaNTPassword']=[smbpass]
#    uentry['userPassword']=[password]
#    udn='cn='+uentry['cn'][0]+',ou=people,'+basedn
#    umod = modlist.addModlist(uentry)

    #Group object
#    gentry={}
#    gentry['objectClass']=['groupOfNames','posixGroup','top','sambaGroupMapping']
#    gentry['sambaGroupType']=['2']
#    gentry['gidNumber']=[str(gid)]
#    gentry['sambaSID']=[gsidbase+str(gsidn+gid)]
#    gentry['cn']=[uentry['uid'][0]]
#    gentry['member']=[udn]
#    gdn='cn='+gentry['cn'][0]+',ou=groups,'+basedn
#    gmod = modlist.addModlist(gentry)

